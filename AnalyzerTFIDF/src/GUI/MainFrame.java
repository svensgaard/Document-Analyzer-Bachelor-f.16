/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import Kmeans.Centroid;
import Kmeans.Clustering;
import analyzertfidf.BayesClassifier;
import analyzertfidf.Keywords;
import analyzertfidf.TFIDF;
import analyzertfidf.Text;
import analyzertfidf.TextProcessor;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author Bryan
 */
public class MainFrame extends javax.swing.JFrame {

    String filePath;
    ArrayList<Text> texts, texts_list;
    ArrayList<String> distinctTerms;
    private ArrayList<Centroid> freqResult;
    private ArrayList<String> cluster_list;
    private BayesClassifier classifier;
    private final TextProcessor tp = new TextProcessor();

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initFields();

        walkFilesActual();
        calculateTFDIF();
        initComponents();
    }

    public MainFrame(String filePath) {
        initFields();

        this.filePath = filePath;
        walkFilesActual();
        calculateTFDIF();
        initComponents();
    }

    private void initFields() {
        texts = new ArrayList<>();
        cluster_list = new ArrayList<>();
        texts_list = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        corpora_scroll = new javax.swing.JScrollPane();
        list_corpus = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        texts_scroll = new javax.swing.JScrollPane();
        list_texts = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        button_recluster = new javax.swing.JButton();
        button_back = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        text_area_input = new javax.swing.JTextArea();
        classify = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        text_area_result = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        cluster_list = clusterTexts();
        list_corpus.setModel(new javax.swing.AbstractListModel() {
            public int getSize() { return cluster_list.size(); }
            public Object getElementAt(int i) { return cluster_list.get(i); }
        });
        list_corpus.setSelectedIndex(0);

        list_corpus.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent event) {
                if (!event.getValueIsAdjusting()) {
                    getTexts(list_corpus.getSelectedIndex());
                }
            }
        });
        corpora_scroll.setViewportView(list_corpus);

        jLabel1.setText("Corpora");

        list_texts.setModel(new javax.swing.AbstractListModel() {

            public int getSize() { return texts_list.size(); }
            public Object getElementAt(int i) { return texts_list.get(i).fileName; }
        });
        texts_scroll.setViewportView(list_texts);
        getTexts(list_corpus.getSelectedIndex());

        jLabel2.setText("Texts");

        button_recluster.setText("Recluster");
        button_recluster.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_reclusterActionPerformed(evt);
            }
        });

        button_back.setText("Back");
        button_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_backActionPerformed(evt);
            }
        });

        text_area_input.setColumns(20);
        text_area_input.setRows(5);
        jScrollPane1.setViewportView(text_area_input);

        classify.setText("Classify");
        classify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classifyActionPerformed(evt);
            }
        });

        text_area_result.setEditable(false);
        text_area_result.setColumns(20);
        text_area_result.setRows(5);
        jScrollPane2.setViewportView(text_area_result);

        jLabel3.setText("Result");

        jLabel4.setText("Input");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel1)
                        .addGap(130, 130, 130)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(button_back)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(corpora_scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(texts_scroll, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(115, 115, 115)
                        .addComponent(button_recluster)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(143, 143, 143))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(152, 152, 152))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(classify)
                                .addGap(118, 118, 118))))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(button_back)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(texts_scroll, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                        .addComponent(corpora_scroll, javax.swing.GroupLayout.Alignment.LEADING)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(button_recluster)
                    .addComponent(classify))
                .addGap(151, 151, 151))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void button_reclusterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_reclusterActionPerformed
        cluster_list = clusterTexts();
        list_corpus.setSelectedIndex(0);
        getTexts(0);
    }//GEN-LAST:event_button_reclusterActionPerformed

    private void button_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_backActionPerformed
        new StartFrame().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_button_backActionPerformed

    private void classifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classifyActionPerformed
        text_area_result.setText("Your input belongs to cluster: " + classifier.predictClassification(text_area_input.getText()));
    }//GEN-LAST:event_classifyActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    /**
     * TEST Read every file in folder
     */
    public ArrayList<String> walkFiles() {
        ArrayList<String> files = new ArrayList<>();
        if (filePath == null) {
            filePath = "/Users/Bryan/NetBeansProjects/Bachelor/BachelorProgram/Document-Analyzer-Bachelor-f.16/AnalyzerTFIDF/resources/documents";
        }
        try {
            Files.walk(Paths.get(filePath)).forEach(filePath -> {
                if (Files.isRegularFile(filePath)) {
                    files.add(filePath.getFileName().toString());
                }
            });
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        return files;
    }

    /**
     * ACTUAL USE
     *
     * @param path
     * @param files
     * @return
     */
    public void walkFilesActual() {

        if (filePath == null) {
            filePath = "/Users/Bryan/NetBeansProjects/Bachelor/BachelorProgram/Document-Analyzer-Bachelor-f.16/AnalyzerTFIDF/resources/documents";
        }
        try {
            Files.walk(Paths.get(filePath)).forEach(fp -> {
                if (Files.isRegularFile(fp)) {
                    //Read corpus files
                    final HashMap<String, Integer> tempMap;
                    tempMap = tp.readFileActual(fp.getFileName().toString());
                    texts.add(new Text(fp.getFileName().toString(), new Keywords(tempMap)));
                }
            });
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        System.out.println("Processing Done");
    }

    /**
     * ACTUAL USE
     *
     */
    private void calculateTFDIF() {
        TFIDF calculator = new TFIDF();
        HashMap<String, Double> termWeightMap;
        System.out.println("-- IF-IDF weight processing --");

        for (Text t : texts) {
            termWeightMap = new HashMap<>();

            for (HashMap.Entry<String, Integer> entry : t.keywords.keywordMap.entrySet()) {
                termWeightMap.put(entry.getKey(), calculator.calculateTFIDF(entry.getKey(), t, texts));
            }

            t.keywords.keywordTFIDFMap = termWeightMap;
        }

        //Make a list of all distinct terms in the corpus
        distinctTerms = new ArrayList<>();
        for (Text t : texts) {
            Iterator it = t.keywords.keywordMap.entrySet().iterator();
            for (int i = 0; i < t.keywords.size(); i++) {
                Map.Entry<String, Integer> pair = (Map.Entry) it.next();
                if (!distinctTerms.contains(pair.getKey())) {
                    distinctTerms.add(pair.getKey());
                }
            }
        }
        //Initialize vectorspace in all texts
        for (Text t : texts) {
            t.vectorSpace = new Double[distinctTerms.size()];
            int count = 0;
            for (String s : distinctTerms) {
                if (t.keywords.keywordTFIDFMap.containsKey(s)) {
                    t.vectorSpace[count] = t.keywords.keywordTFIDFMap.get(s);
                } else {
                    t.vectorSpace[count] = 0.0;
                }
                count++;
            }
        }
    }

    /**
     * ACTUAL USE RETURN A STRING ARRAY TO REPRESENT CLUSTERS
     */
    private ArrayList<String> clusterTexts() {
        cluster_list = new ArrayList<>();
        freqResult = new ArrayList<>();
        System.out.println("Clustering...");
        System.out.println("Texts size: " + texts.size());
        //Cluster texts
        //Cluster frequency
        Clustering clustering = new Clustering();
        freqResult = clustering.prepareCluster(3, texts);
        //Add texts to List

        int count = 1;
        for (Centroid c : freqResult) {
            System.out.println(c);
            c.name = "Centroid" + count;
            cluster_list.add(c.name);
            count++;
        }
        
        pack();

        try {
            // GENERATE TRAINING DATA
            tp.generateTrainingData(freqResult, filePath);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

        // Initialize classifier
        classifier = new BayesClassifier(freqResult.size(), filePath);
        
        return cluster_list;
    }

    public void getTexts(int index) {
        texts_list = freqResult.get(index).GroupedDocument;

        list_texts.setModel(new javax.swing.AbstractListModel() {
            public int getSize() {
                return texts_list.size();
            }

            public Object getElementAt(int i) {
                return texts_list.get(i).fileName;
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_back;
    private javax.swing.JButton button_recluster;
    private javax.swing.JButton classify;
    private javax.swing.JScrollPane corpora_scroll;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList list_corpus;
    private javax.swing.JList list_texts;
    private javax.swing.JTextArea text_area_input;
    private javax.swing.JTextArea text_area_result;
    private javax.swing.JScrollPane texts_scroll;
    // End of variables declaration//GEN-END:variables

}
